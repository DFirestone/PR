-------------------------------------------------------
------- D A T A   D E F I N I T I O N -----------------
-------------------------------------------------------
type CHANGING_ROOM is record of
	capacity : INTEGER /* capacity of ch_r (available places) */
	sexOcupancy : { "M", "F", "-" }	/* what sex occupies the ch_r */	
end

type CUSTOMER is record of
	userId : INTEGER
	sex: { "M", "F" }
	ocupancy: { 0, 1, 2, 3, 4, 5 } 	/*	0 - none ocupancy
						1 - 1st changing room
						2 - 2nd changing room
						3 - 3rd changing room
						4 - showers
						5 - pool */
end

type MESSAGE is record of
	messegeType : INTEGER 	/*	1 - ENTER_REQUEST
					2 - REPLY_ENTER_REQUEST
					3 - RELEASE_LOCKER_MESSAGE */
	sender : CUSTOMER
	receiverId : Integer
end

type PACKET is record of
	clock : INTEGER	/* nee
	tag : INTEGER /* message type */
	mId : INREGER /* message id */
	sId : INTEGER /* sender id */
	rId : INTEGER /* receiver id */
	
	msg : MESSAGE /* message to send */
end


-------------------------------------------------------------------------------
------- A D A P T E D   L A M P O R T   A L G O R I T H M ---------------------
-------------------------------------------------------------------------------

msgIn	 	: MESSAGE
pcktOut		: PACKET
clock_i		: INTEGER
d		: INTEGER

when e_send(Pi, Pj, msgOut:MESSAGE) do
	clock_i := clock_i + d
	pckOut.clock := clock_i
	pcktOut.msg := msgOut
	send(Qi, Qj, pcktOut)
end when

when e_receive(Qj, Qi, pcktIn : PACKET) do
	clock_i := max(clock_i, pcktIn.clock)+d
	msgIn := pcktIn.data
	deliver(Pj, Pi, msgIn)
end when


3 kolejki - po jednej dla każdej szatni, plus 1 dla prysznicy

e_send Klient chce wejść do wolnej (i odpowiadającej mu płcią) szatni:
1. Proces wysyła żądanie wejścia do szatni M1 wraz ze swoim znacznikiem czasowym i dodaje swoje żądanie do własnej kolejki.
2. Powtarzamy punkt 1. dla pozostałych szatni.
3. Wchodzimy do pierwszej szatni na wejście do której dostaniemy zezwolenie od wszystkich pozostałych procesów (klientów).
4. Przed wejściem do sekcji krytycznej usuwamy swoje żądanie z kolejek do szatni którzych nie wybraliśmy.
5. Po wyjściu z sekcji krytycznej usuwamy własne żądanie z kolejki żądań do opuszczanej właśnie szatni oraz wysyłamy odpowiedzi na wszystkie żądania w kolejce a następnie usuwamy je z kolejki. 

e_receive Klient (proces) Pj otrzymuje żądanie wejścia do szatni Mk przez Proces Pi
1. Proces Pj sprawdza czy wg jego kolejki żądań proces Pj może wejść i wysyła odpowiedź typu ZEZWOLENE procesowi Pi.
ZEZWOLENIE jest wysłane jeżeli zachodzą następujące warunki:
	a) Żądanie procesu byłoby wstawione w kolejce (uszeregowanej względem znaczników czasowych)
	na najdalej z-tej pozycji gdzie z<=M (M-pojemnośc szatni)
	b) wszystkie procesy w kolejce żądań od pozycji 1 do z-1 oraz proces Pi mają taką samą płeć jak proces na pozycji 1
2. Jeśli którykolwiek z warunków 1a lub 1b jest niespełniony otrzymane żądanie procesu Pi zostaje dodane do kolejki żądań dostępu do danej szatni


Procedura obsługi sali z natryskami przebiega podobnie z tym, że jest jedna kolejka (nie obowiązuje punkt 2. z e_send


----------------------------------------------
------- O L D   V E R S I O N ----------------
----------------------------------------------

type locker is record of
	string : gender
	int : occupancy
end record

locker[] lockers[3]
int myLockerId = -1
string gender = ("male"|"famale")
//customers - wszystkie dzialajace procesy

when e_enter_to_locker() do

	while (myLockerId < 0) do
	//uaktualnienie wszystkich szatni broadcast-em
	for all customer in customers do
		e_send(customer, TRY_ENTER_MSG)
	end for
	
	//uaktualniamy stan szatnii
	for all customer in customers do
		int customerLockerId
		e_receive(msg, customerLockerId)
		if (msg == MY_LOCKER_ID_MSG) then
			lockerRooms[customerLockerId] += 1
		end if
	end for
	
	//wybor szatni
	
		for all lockerRoom in lockers do
			if (lockerRoom.occupancy < 1) or (lockerRoom.gender == gender) then
				if myLockerId == -1 then
					myLockerId = lockerRoom
				else
	//jesli sa dwie szatnie zapełnione osobami naszej plci				
	//wybieramy szatnie w ktorej jest większe zapelnienie
					if (myLockerId.occupancy < lockerRoom.occupancy) then
						myLockerId = lockerRoom
					end if
				end if		
			end if
		end for
	end while

	//wejscie do szatni, informujemy innych broadcastem
	for all customer in customers do
		e_send(ENTER_MSG, myLockerId)
	end for

end when


when e_return_to_locker() do
	//zwalnianie szatni (broadcast)
	for all customer in customers do
		e_send(EXIT_MSG, myLockerId)
	end for
end when